#include <linux/ioctl.h> /* for defining the IO controls */

/*****************************************************************************/
/* IO CONTROL definition for AIC3008                                         */
/*****************************************************************************/
#define AIC3008_IO_IOCTL_MAGIC     's'
#define AIC3008_IO_SET_TX_PARAM     _IOW(AIC3008_IO_IOCTL_MAGIC, 0x10, unsigned)
#define AIC3008_IO_SET_RX_PARAM     _IOW(AIC3008_IO_IOCTL_MAGIC, 0x11, unsigned)
#define AIC3008_IO_CONFIG_TX        _IOW(AIC3008_IO_IOCTL_MAGIC, 0x12, unsigned int)
#define AIC3008_IO_CONFIG_RX        _IOW(AIC3008_IO_IOCTL_MAGIC, 0x13, unsigned int)
#define AIC3008_IO_SET_DSP_PARAM    _IOW(AIC3008_IO_IOCTL_MAGIC, 0x20, unsigned)
#define AIC3008_IO_CONFIG_MEDIA     _IOW(AIC3008_IO_IOCTL_MAGIC, 0x21, unsigned int)
#define AIC3008_IO_CONFIG_VOICE     _IOW(AIC3008_IO_IOCTL_MAGIC, 0x22, unsigned int)
#define AIC3008_IO_CONFIG_VOLUME_L  _IOW(AIC3008_IO_IOCTL_MAGIC, 0x23, unsigned int)
#define AIC3008_IO_CONFIG_VOLUME_R  _IOW(AIC3008_IO_IOCTL_MAGIC, 0x24, unsigned int)
#define AIC3008_IO_POWERDOWN        _IOW(AIC3008_IO_IOCTL_MAGIC, 0x25, unsigned int)
#define AIC3008_IO_LOOPBACK         _IOW(AIC3008_IO_IOCTL_MAGIC, 0x26, unsigned int)
#define AIC3008_IO_DUMP_PAGES       _IOW(AIC3008_IO_IOCTL_MAGIC, 0x30, unsigned int)
#define AIC3008_IO_READ_REG         _IOWR(AIC3008_IO_IOCTL_MAGIC, 0x31, unsigned)
#define AIC3008_IO_WRITE_REG        _IOW(AIC3008_IO_IOCTL_MAGIC, 0x32, unsigned)
#define AIC3008_IO_RESET            _IOW(AIC3008_IO_IOCTL_MAGIC, 0x33, unsigned int)
#define AIC3008_IO_DUMP_DSP         _IOW(AIC3008_IO_IOCTL_MAGIC, 0x34, unsigned int)
#define AIC3008_IO_GET_PCBID        _IOR(AIC3008_IO_IOCTL_MAGIC, 0x35, unsigned int)

#define IO_CTL_ROW_MAX      64
#define IO_CTL_COL_MAX      1024
#define MINIDSP_ROW_MAX     32
#define MINIDSP_COL_MAX     20000
#if 0
#define UPLINK_MODE_MAX		IO_CTL_ROW_MAX
#define DOWNLINK_MODE_MAX	IO_CTL_ROW_MAX
#define DSP_MODE_MAX		MINIDSP_ROW_MAX
#define AIC3008_PARA_MAX	IO_CTL_COL_MAX

/* structures for SPI commands */
typedef struct _CODEC_SPI_CMD {
	unsigned char act;
	unsigned char reg;
	unsigned char data;
} CODEC_SPI_CMD;

typedef struct _CODEC_SPI_CMD_PARAM {
	CODEC_SPI_CMD *data;
	unsigned int len;
} CODEC_SPI_CMD_PARAM;

struct AIC3008_PARAM {
	unsigned int row_num;
	unsigned int col_num;
	void *cmd_data;
};
#endif

/* enumerated modes */
enum aic3008_uplink_mode {
	INITIAL = 0,
	CALL_UPLINK_IMIC_RECEIVER = 1,
	CALL_UPLINK_EMIC_HEADPHONE,
	CALL_UPLINK_IMIC_HEADPHONE,
	CALL_UPLINK_IMIC_SPEAKER,
	CALL_UPLINK_IMIC_RECEIVER_DUALMIC,
	CALL_UPLINK_EMIC_HEADPHONE_DUALMIC,
	CALL_UPLINK_IMIC_SPEAKER_DUALMIC,
	VOICERECORD_IMIC = 8,
	VOICERECORD_EMIC,
	VIDEORECORD_IMIC,
	VIDEORECORD_EMIC,
	VOICERECOGNITION_IMIC = 12,
	VOICERECOGNITION_EMIC,
	UPLINK_BT_AP = 14,
	UPLINK_BT_BB,
	FM_IN_SPEAKER = 16,
	FM_IN_HEADPHONE,
	TTY_IN_HCO = 18,
	TTY_IN_VCO,
	TTY_IN_FULL,
	UPLINK_MUSE = 21,
	UPLINK_HAC,
	UPLINK_PATH_OFF = 23,
	UPLINK_WAKEUP,
	POWER_OFF = 25,
	STEREO_VIDEO_RECORDING_IMIC_PORTRAIT = 26,
	STEREO_VIDEO_RECORDING_IMIC_LANDSCAPE,
	VOIP_UPLINK_IMIC_RECEIVER = 28,
	VOIP_UPLINK_EMIC_HEADPHONE,
	VOIP_UPLINK_IMIC_HEADPHONE,
	VOIP_UPLINK_IMIC_SPEAKER,
	VOIP_UPLINK_BT,
	CALL_UPLINK_IMIC_RECEIVER_DUALMIC_WB = 33,
	CALL_UPLINK_EMIC_HEADPHONE_DUALMIC_WB,
	CALL_UPLINK_IMIC_SPEAKER_DUALMIC_WB,
	CALL_UPLINK_IMIC_DOCK,
	MFG_VIDEORECORD_2ndMIC = 37,
	CALL_UPLINK_EMIC_HEADPHONE_BEATS = 38,
	CALL_UPLINK_EMIC_HEADPHONE_BEATS_WB,
	VOIP_UPLINK_EMIC_HEADPHONE_BEATS,
	UPLINK_MODE_END,
};

enum aic3008_downlink_mode {
	CALL_DOWNLINK_IMIC_RECEIVER = 1,
	CALL_DOWNLINK_EMIC_HEADPHONE,
	CALL_DOWNLINK_IMIC_HEADPHONE,
	CALL_DOWNLINK_IMIC_SPEAKER,
	CALL_DOWNLINK_IMIC_RECEIVER_DUALMIC,
	CALL_DOWNLINK_EMIC_HEADPHONE_DUALMIC,
	CALL_DOWNLINK_IMIC_SPEAKER_DUALMIC,
	PLAYBACK_RECEIVER = 8,
	PLAYBACK_HEADPHONE,
	PLAYBACK_SPEAKER,
	RING_HEADPHONE_SPEAKER = 11,
	PLAYBACK_SPEAKER_ALT = 12,
	USB_AUDIO = 13,
	DOWNLINK_BT_AP = 14,
	DOWNLINK_BT_BB,
	FM_OUT_SPEAKER = 16,
	FM_OUT_HEADPHONE,
	TTY_OUT_HCO = 18,
	TTY_OUT_VCO,
	TTY_OUT_FULL,
	DOWNLINK_MUSE,
	DOWNLINK_HAC,
	DOWNLINK_PATH_OFF = 23,
	DOWNLINK_WAKEUP,
	PLAYBACK_HEADPHONE_URBEATS = 25,
	PLAYBACK_HEADPHONE_SOLO,
	PLAYBACK_SPEAKER_BEATS,
	VOIP_DOWNLINK_IMIC_RECEIVER = 28,
	VOIP_DOWNLINK_EMIC_HEADPHONE,
	VOIP_DOWNLINK_IMIC_HEADPHONE,
	VOIP_DOWNLINK_IMIC_SPEAKER,
	VOIP_DOWNLINK_BT,
	CALL_DOWNLINK_IMIC_RECEIVER_DUALMIC_WB,
	CALL_DOWNLINK_EMIC_HEADPHONE_DUALMIC_WB,
	CALL_DOWNLINK_IMIC_SPEAKER_DUALMIC_WB,
	CALL_DOWNLINK_IMIC_DOCK,
	PLAYBACK_DOCK,
	CALL_DOWNLINK_EMIC_HEADPHONE_BEATS = 38,
	CALL_DOWNLINK_EMIC_HEADPHONE_BEATS_WB,
	VOIP_DOWNLINK_EMIC_HEADPHONE_BEATS,
	CALL_DOWNLINK_IMIC_HEADPHONE_WB,
	MFG_PLAYBACK_L_SPEAKER = 42,
	MFG_PLAYBACK_R_SPEAKER,
	PLAYBACK_HEADPHONE_FULLDELPX,
	PLAYBACK_SPK_FULLDELPX,
	DOWNLINK_MODE_END,
};

enum htc_audio_sound_effect {
    MFG = 0,
	Phone_Default = 1,
	Phone_Receiver_Dualmic,
	Phone_Speaker_Dualmic,
	Phone_Headset,
	Phone_HAC,
	Phone_TTY,
	Phone_BT,
	Phone_Handset_Dualmic_WB,
	Phone_Speaker_Dualmic_WB,
	Phone_Headset_WB,
	Phone_Dock = 11,
	Playback_Default = 12,
	Playback_Speaker_Default,
	Playback_Headset_Generic,
	Playback_Headset_urBeats,
	Playback_Headset_Solo,
	Playback_Headset_Pro,
	Playback_Headset_Studio,
	Playback_SPK_Beats,
	Playback_Dock,
	Playback_SPK_Ring = 21,
	Record_Default = 22,
	Record_V_Mono,
	Record_V_IMIC_Landscape_Stereo,
	Record_V_IMIC_Portrait_Stereo,
	Record_A_VoiceRecoder_AMR,
	Record_A_VoiceRecoder_AAC,
	Record_A_Note_Recording,
	Record_A_Speaker_VR = 29,
	FM_Headset = 30,
	FM_Speaker = 31,
	VOIP_Receiver = 32,
	VOIP_Speaker,
	VOIP_Headset,
	VOIP_BT = 35,
	VOIP_Receiver_HW_AEC = 36,
	VOIP_Speaker_HW_AEC,
	VOIP_Headset_HW_AEC,
	VOIP_BT_HW_AEC = 39,
	SKYPE_Receiver = 40,
	SKYPE_Speaker,
	SPYPE_Headset = 42,
    End_Audio_Effect,
};

